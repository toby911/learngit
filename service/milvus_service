from fastapi import FastAPI, HTTPException
from pymilvus import connections, Collection, FieldSchema, CollectionSchema
from queue import Queue
import threading
import time
import uvicorn
from configs.app_config import MILVUS_HOST, MILVUS_PORT, MILVUS_MAX_CONNECTION

app = FastAPI()

MAX_CONNECTIONS = 10
CONNECTION_TIMEOUT = 60

connections.connect(host=MILVUS_HOST, port=MILVUS_PORT)

class ConnectionPool:
    def __init__(self, max_connections=MILVUS_MAX_CONNECTION):
        self.max_connections = max_connections
        self.connections = []
        self.lock = threading.Lock()
        self.queue = Queue(max_connections)
        
    def get_connection(self):
        try:
            connection = self.queue.get(block=False)
        except:
            connection = self.create_connection()
        return connection
        
    def create_connection(self):
        self.lock.acquire()
        if len(self.connections) < self.max_connections:
            connection = connections.connect(host='localhost', port='19530')
            self.connections.append(connection)
        else:
            connection = self.connections.pop(0)
            connection.ping()
        self.lock.release()
        return connection
        
    def return_connection(self, connection):
        self.queue.put(connection)
        
    def close_all_connections(self):
        for connection in self.connections:
            connection.close()
        
collection_pools = {}

class MilvusService:
    @staticmethod
    def get_collection_pool(collection_name):
        if collection_name not in collection_pools:
            collection_pools[collection_name] = ConnectionPool()
        return collection_pools[collection_name]
        
    @staticmethod
    def create_collection(collection_name, collection_para :dict, dimension=128, index_file_size=1024, metric_type='L2'):
        collection_pool = MilvusService.get_collection_pool(collection_name)
        
        with collection_pool.get_connection() as connection:
            if collection_name in connection.list_collections():
                raise HTTPException(status_code=400, detail="Collection already exists")
            
            field = FieldSchema(name='embedding', dtype='float_vector', dim=dimension)
            schema = CollectionSchema(fields=[field], description='embedding collection')
            collection = Collection(name=collection_name, schema=schema, using_connection=connection)
            collection.create()
            collection.create_index(field_name='embedding', index_params={'index_type': 'IVF_FLAT', 'nlist': index_file_size, 'metric_type': metric_type})
            
        return {'status': 'ok', 'message': 'Collection created successfully'}
    
    @staticmethod
    def insert(collection_name, embeddings):
        collection_pool = MilvusService.get_collection_pool(collection_name)
        
        with collection_pool.get_connection() as connection:
            if collection_name not in connection.list_collections():
                raise HTTPException(status_code=400, detail="Collection does not exist")
            
            collection = Collection(name=collection_name, using_connection=connection)
            collection.insert(embeddings)
            
        return {'status': 'ok', 'message': 'Embeddings inserted successfully'}
    
    @staticmethod
    def search(collection_name, query_embedding, top_k=10):
        collection_pool = MilvusService.get_collection_pool(collection_name)
        
        with collection_pool.get_connection() as connection:
            if collection_name not in connection.list_collections():
                raise HTTPException(status_code=400, detail="Collection does not exist")
            
            collection = Collection(name=collection_name, using_connection=connection)
            results = collection.search(query_embedding, top_k=top_k)
            
        return {'status': 'ok', 'message': 'Search results', 'results': results}

@app.post('/create_collection')
def create_collection(collection_name: str, dimension: int = 128, index_file_size: int = 1024, metric_type: str = 'L2'):
    result = MilvusService.create_collection(collection_name, dimension=dimension, index_file_size=index_file_size, metric_type=metric_type)
    return result

@app.post('/insert')
def insert(collection_name: str, embeddings: list):
    result = MilvusService.insert(collection_name, embeddings)
    return result

@app.post('/search')
def search(collection_name: str, query_embedding: list, top_k: int = 10):
    result = MilvusService.search(collection_name, query_embedding, top_k=top_k)
    return result

if __name__ == '__main__':
    uvicorn.run(app, host='0.0.0.0', port=8001)